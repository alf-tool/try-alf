[{"name":"extend","description":"Add derived attributes","signature":"ext:TupleComputation","options":null,"example":"extend(suppliers, big: ->(t){ t.name.upcase }, small: ->(t){ t.name.downcase })"},{"name":"frame","description":"Aka limit/offset","signature":"ordering:Ordering, offset:Integer, limit:Integer","options":null,"example":"frame(suppliers, [:status, :sid], 0, 3)"},{"name":"project","description":"Keep attributes","signature":"attributes:AttrList","options":"allbut: Boolean","example":"project(suppliers, [:sid, :city])"},{"name":"restrict","description":"Predicate-based filtering","signature":"predicate:Predicate","options":null,"example":"restrict(suppliers, eq(city: 'Paris') & gt(:status, 20))"},{"name":"rename","description":"Rename attributes","signature":"renaming:Renaming","options":null,"example":"rename(suppliers, :sid => :supplier_id, :city => :lives_in)"},{"name":"union","description":"Logical OR","signature":null,"options":null,"example":"union(project(suppliers, [:city]), project(parts, [:city]))"},{"name":"minus","description":"Logical AND-NOT","signature":null,"options":null,"example":"minus(project(suppliers, [:city]), project(parts, [:city]))"},{"name":"intersect","description":"Logical AND","signature":null,"options":null,"example":"intersect(project(suppliers, [:city]), project(parts, [:city]))"},{"name":"join","description":"Natural join","signature":null,"options":null,"example":"join(suppliers, supplies)"},{"name":"matching","description":"Where exists","signature":null,"options":null,"example":"matching(suppliers, supplies)"},{"name":"not_matching","description":"Where not exists","signature":null,"options":null,"example":"not_matching(suppliers, supplies)"},{"name":"wrap","description":"Tuple-valued attributes","signature":"attributes:AttrList, as:AttrName","options":"allbut: Boolean","example":"wrap(suppliers, [:city, :status], :extra)"},{"name":"unwrap","description":"Inverse of wrap","signature":"attribute:AttrName","options":null,"example":"unwrap(wrap(suppliers, [:city, :status], :extra), :extra)"},{"name":"group","description":"Relation-valued attributes","signature":"attributes:AttrList, as:AttrName","options":"allbut: Boolean","example":"group(suppliers, [:city], :suppliers, allbut: true)"},{"name":"ungroup","description":"Inverse of group","signature":"attribute:AttrName","options":null,"example":"ungroup(group(suppliers, [:city], :suppliers, allbut: true), :suppliers)"},{"name":"summarize","description":"Aggregate and compute","signature":"by:AttrList, summarization:Summarization","options":"allbut: Boolean","example":"summarize(supplies, [:sid], count: count(), total: sum(:qty))"},{"name":"rank","description":"Tuple ranking","signature":"order:Ordering, as:AttrName","options":null,"example":"rank(suppliers, [:status], :ranking)"},{"name":"page","description":"Pagination","signature":"ordering:Ordering, page_index:Integer","options":"page_size: Integer","example":"page(suppliers, [:status, :sid], 1, page_size: 2)"},{"name":"allbut","description":"Remove attributes","signature":"attributes:AttrList","options":null,"example":"allbut(suppliers, [:sid, :city])"}]